import Apollo

{{#each models ~}}
{{#if isObject ~}}
public struct {{ name }}: GraphQLMapConvertible {
  public var fieldsMap: GraphQLMap

  {{#times fields.length}}
    public init({{#limitedEach ../fields count=this ~}}{{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}{{#unless @last}}, {{/unless}}{{/limitedEach ~}}) {
      fieldsMap = [{{#limitedEach ../fields count=this ~}}"{{ name }}": {{ name }}{{#unless @last}}, {{/unless}}{{/limitedEach ~}}]
    }

  {{/times}}
}

{{/if ~}}

{{#if isEnum}}
public enum {{ name }}: String {
  {{#each enumValues }}
    case {{name}} = "{{ value }}"
  {{/each}}
}

{{/if ~}}
{{/each ~}}


{{#each documents ~}}
  public struct {{ name }} {
  {{#if hasVariables}}
    public struct Variables {
    {{#each variables}}
      public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}
    {{/each}}
    }

  {{/if ~}}

  {{#each innerTypes}}
    public struct {{name}} {
    {{#each fields}}
      public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}
    {{/each}}
    }

  {{/each ~}}

  {{#each resultFields}}
    public struct Result {
    {{#each fields}}
      public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}
    {{/each}}
    }

  {{/each ~}}
  }

{{/each ~}}
