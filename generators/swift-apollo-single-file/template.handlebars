import Apollo

{{#each models ~}}
  {{#if isObject ~}}
  public struct {{ name }}: GraphQLMapConvertible {
    public var fieldsMap: GraphQLMap

    {{#times fields.length}}
    public init({{#limitedEach ../fields count=this ~}}{{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}{{#unless @last}}, {{/unless}}{{/limitedEach ~}}) {
      fieldsMap = [{{#limitedEach ../fields count=this ~}}"{{ name }}": {{ name }}{{#unless @last}}, {{/unless}}{{/limitedEach ~}}]
    }

    {{/times}}
  }

  {{/if ~}}

  {{#if isEnum ~}}
  public enum {{ name }}: String {
  {{#each enumValues }}
    case {{name}} = "{{ value }}" /// {{ description }}
  {{/each ~}}
  }

  {{/if ~}}
{{/each ~}}

{{#each documents ~}}
  public final class {{ name }}: {{#if isMutation }}GraphQLMutation{{/if}}{{#if isQuery }}GraphQLQuery{{/if}}{{#if isSubscription }}GraphQLSubscription{{/if}} {
    public static let operationDefinition =
      {{#multiline-string document }}{{/multiline-string}};

    {{#each variables}}
    public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}
    {{/each}}

    public init({{#each variables}}{{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}]{{/if}}{{#unless isRequired}}?{{/unless}}{{#unless @last}}, {{/unless}}{{/each}}) {
      {{#each variables}}
      self.{{ name }} = {{ name }}
      {{/each}}
    }

    public var variables: GraphQLMap? {
      return [{{#each variables}}"{{name}}": {{name}}{{#unless @last}}, {{/unless}}{{/each}}]
    }

    {{> inner-type innerTypes=innerTypes}}
  }

{{/each ~}}

