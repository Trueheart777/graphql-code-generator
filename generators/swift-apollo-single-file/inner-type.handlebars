{{#each innerTypes}}

public struct {{#if isRoot}}Data{{else}}{{#if isInlineFragment}}As{{schemaTypeName}}{{else}}{{name}}{{/if}}{{/if}}: {{#if isInlineFragment}}GraphQLConditionalFragment{{else}}GraphQLMappable{{/if}} {
  {{#if isInlineFragment}}
  public static let possibleTypes = ["{{schemaTypeName}}"]
  {{/if}}
  {{#unless isRoot}}
  public let __typename{{#if isInlineFragment}} = "{{schemaTypeName}}"{{else}}: String{{/if}}
  {{/unless}}
  {{#if usingFragments}}
  public let fragments: Fragments
  {{/if}}
  {{#if isInlineFragment}}
    {{#each ../parentFields}}
  public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}?]{{/if}}{{#unless isRequired}}?{{/unless}}
    {{/each}}
  {{/if}}
  {{#each fields}}
  public let {{ name }}: {{#if isArray}}[{{/if}}{{ type }}{{#if isArray}}?]{{/if}}{{#unless isRequired}}?{{/unless}}
  {{/each}}
  {{#each inlineFragments}}
  public let as{{ typeName }}: As{{ typeName }}?
  {{/each}}

  public init(reader: GraphQLResultReader) throws {
    {{#unless isRoot}}
    __typename = try reader.value(for: Field(responseName: "__typename"))
    {{/unless}}
    {{#each fields}}
    {{ name }} = try reader.{{#if isRequired }}{{#if isArray}}list{{else}}value{{/if}}{{ else }}{{#if isArray}}optionalList{{else}}optionalValue{{/if}}{{/if}}(for: Field(responseName: "{{ name }}"))
    {{/each}}
    {{#each inlineFragments}}
    as{{ typeName }} = try As{{ typeName }}(reader: reader, ifTypeMatches: __typename)
    {{/each}}
    {{#if usingFragments}}
      {{#each fragmentsUsed}}
    let {{fieldName}} = try {{typeName}}.Fragment(reader: reader)
      {{/each}}
    fragments = Fragments({{#each fragmentsUsed}}{{fieldName}}: {{fieldName}}{{/each}})
    {{/if}}
  }
  {{#if usingFragments}}
  public struct Fragments {
  {{#each fragmentsUsed}}
    public let {{fieldName}}: {{typeName}}.Fragment
  {{/each}}
  }
  {{/if}}
  {{> inner-type innerTypes=innerTypes parentFields=fields}}
}
{{/each}}