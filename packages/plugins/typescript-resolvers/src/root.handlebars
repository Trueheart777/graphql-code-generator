import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
{{{ importMappers types }}}

{{{ importContext }}}

export type Resolver<Result, Parent = {}, Context = {}, Args = {}> = (
  parent: Parent,
  args: Args,
  context: Context,
  info: GraphQLResolveInfo
) => Promise<Result> | Result;

export interface ISubscriptionResolverObject<Result, Parent, Context, Args> {
  subscribe<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo
  ): AsyncIterator<R | Result> | Promise<AsyncIterator<R | Result>>;
  resolve?<R = Result, P = Parent>(
    parent: P,
    args: Args,
    context: Context,
    info: GraphQLResolveInfo
  ): R | Result | Promise<R | Result>;
}

export type SubscriptionResolver<Result, Parent = {}, Context = {}, Args = {}> =
  | ((...args: any[]) => ISubscriptionResolverObject<Result, Parent, Context, Args>)
  | ISubscriptionResolverObject<Result, Parent, Context, Args>;

type Maybe<T> = T | null | undefined;

export type TypeResolveFn<Types, Parent = {}, Context = {}> = (
  parent: Parent,
  context: Context,
  info: GraphQLResolveInfo
) => Maybe<Types>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult, TArgs = {}, TContext = {}> = (
  next: NextResolverFn<TResult>,
  source: any,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => TResult | Promise<TResult>;

{{#each types}}
{{~> resolver }}
{{/each}}

{{#each interfaces}}
{{~> resolveType }}
{{/each}}

{{#each unions}}
{{~> resolveType }}
{{/each}}

{{#each definedDirectives}}
{{~> directive}}
{{/each}}

{{#each scalars}}
{{~> scalar}}
{{/each}}

export interface IResolvers {
  {{#each types}}
    {{ convert name }}?: {{ convert name }}Resolvers{{#unless @root.config.noNamespaces}}.{{/unless}}Resolvers;
  {{/each}}
  {{#each interfaces}}
    {{ convert name }}?: {{ convert name }}Resolvers{{#unless @root.config.noNamespaces}}.{{/unless}}Resolvers;
  {{/each}}
  {{#each unions}}
    {{ convert name }}?: {{ convert name }}Resolvers{{#unless @root.config.noNamespaces}}.{{/unless}}Resolvers;
  {{/each}}
  {{#each scalars}}
    {{ convert name }}?: GraphQLScalarType;
  {{/each}}
}

export interface IDirectiveResolvers<Result> {
  {{#each definedDirectives}}
    {{ name }}?: {{ convert name }}DirectiveResolver<Result>;
  {{/each}}
}