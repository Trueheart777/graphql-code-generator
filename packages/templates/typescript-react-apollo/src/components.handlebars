import * as ReactApollo from 'react-apollo';
import * as React from 'react';

{{#unless @root.config.noGraphqlTag}}
import gql from 'graphql-tag';
{{/unless}}

{{#each fragments}}
{{#unless @root.config.noNamespaces}}
export namespace {{toPascalCase name}} {
{{/unless}}
    export const {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Document = {{#unless @root.config.noGraphqlTag}}gql`{{{ document }}}`{{else}}{{{ gql document }}}{{/unless}};
{{#unless @root.config.noNamespaces}}
}
{{/unless}}
{{/each}}

{{#each operations }}
    {{#unless @root.config.noNamespaces}}
export namespace {{toPascalCase name}} {
    {{/unless}}
    export const {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Document = {{#unless @root.config.noGraphqlTag}}gql`{{{ document }}}`{{else}}{{{ gql document }}}{{/unless}};
    export const {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}DocumentWithFragments = { 
        kind: 'Document', 
        definitions: [
        ...{{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Document.definitions,
        {{#each innerModels}}
            {{#if hasFragmentsSpread}}
                {{#each fragmentsSpread}}
        ...{{ toPascalCase fragmentName }}{{#unless @root.config.noNamespaces}}.{{/unless}}Document.definitions
                {{/each}}
            {{/if}}
        {{/each}}
        ]
    };
    export interface {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}ComponentProps {
        {{ toLowerCase operationType }}?: any;
        variables?: {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Variables;
        children: (result: ReactApollo.QueryResult<{{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}{{toPascalCase operationType}}, {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Variables>) => React.ReactNode;
    };
    export class {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Component extends React.Component<{{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}ComponentProps> {
        render(){
            return (
                <ReactApollo.{{ toPascalCase operationType }}<{{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}{{toPascalCase operationType}}, {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}Variables>
                {{ toLowerCase operationType }}={ {{#if @root.config.noNamespaces}}{{ toPascalCase name }}{{/if}}DocumentWithFragments }
                {...this.props}
                />
            );
        }
    }   
    {{#unless @root.config.noNamespaces}}
}
    {{/unless}}
{{/each}}